name: Publish Release

on:
  push:
    branches-ignore:
      - 'main'

jobs:
  version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      tag: ${{ steps.versioning.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - id: versioning
        run: |
          VERSION_NAME=$(grep 'VERSION_NAME' gradle.properties | cut -d'=' -f2)
          echo "version=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "tag=$VERSION_NAME" >> $GITHUB_OUTPUT   # tag = 1.0.0 sem 'v'

  publish:
    name: Publish
    runs-on: macos-latest
    needs: [version]
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - run: chmod +x gradlew

      # 2️⃣ Build iOS XCFramework
      - run: ./gradlew :designsystem:assembleDesignsystemReleaseXCFramework -PVERSION_NAME=${{ needs.version.outputs.version }}

      # 3️⃣ Package XCFramework
      - run: |
          cd designsystem/build/XCFrameworks/release
          zip -rq ../../../../DesignSystem.xcframework.zip DesignSystem.xcframework
          cd ../../../../

      # 4️⃣ Calculate checksum
      - id: checksum
        run: |
          echo "CHECKSUM=$(swift package compute-checksum DesignSystem.xcframework.zip)" >> $GITHUB_ENV

      # 5️⃣ Generate Package.swift in root
      - run: |
          cat <<EOF > Package.swift
          // swift-tools-version:5.9
          import PackageDescription

          let package = Package(
              name: "DesignSystem",
              platforms: [.iOS(.v14)],
              products: [
                  .library(name: "DesignSystem", targets: ["DesignSystem"])
              ],
              targets: [
                  .binaryTarget(
                      name: "DesignSystem",
                      url: "https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag }}/DesignSystem.xcframework.zip",
                      checksum: "${{ env.CHECKSUM }}"
                  )
              ]
          )
          EOF

      # 6️⃣ Commit Package.swift
      - run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add Package.swift
          git commit -m "Add Package.swift for version ${{ needs.version.outputs.version }}" || echo "No changes to commit"
          git push origin HEAD

      # 7️⃣ Create Git Tag without 'v'
      - run: |
          git tag ${{ needs.version.outputs.tag }} -m "Release ${{ needs.version.outputs.tag }}"
          git push origin ${{ needs.version.outputs.tag }}

      # 8️⃣ Create Release and Upload Assets
      - run: |
          gh release create ${{ needs.version.outputs.tag }} \
            DesignSystem.xcframework.zip \
            --title "Release ${{ needs.version.outputs.tag }}" \
            --notes "Automatic release for version ${{ needs.version.outputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
