name: Publish Design System

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  publish:
    name: Build & Publish DesignSystem (KMP + SPM)
    runs-on: macos-latest
    permissions:
      contents: write
      packages: write

    steps:
      # 1️⃣ Checkout do repositório com histórico completo
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para o git describe funcionar corretamente

      # 2️⃣ Configura JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # 3️⃣ Determina a versão a partir das tags Git e a exporta
      - name: Determine Version
        id: version
        run: echo "VERSION_NAME=$(git describe --tags --always)" >> $GITHUB_ENV

      # 4️⃣ Permite execução do Gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

#      # 5️⃣ Publica a lib KMP com a versão dinâmica
#      - name: Publish KMP Library to GitHub Packages
#        run: ./gradlew :designsystem:publish -PVERSION_NAME=${{ env.VERSION_NAME }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6️⃣ Gera o XCFramework para iOS
      - name: Build iOS XCFramework
        run: ./gradlew :designsystem:assembleReleaseXCFramework -PVERSION_NAME=${{ env.VERSION_NAME }}

      # 7️⃣ Cria o Package.swift dinamicamente
      - name: Create Swift Package structure
        run: |
          mkdir -p SwiftPackage
          cp -R designsystem/build/XCFrameworks/release/DesignSystem.xcframework SwiftPackage/

          echo "Package.swift generated for version ${{ env.VERSION_NAME }}"

          cat <<EOF > SwiftPackage/Package.swift
          // swift-tools-version:5.9
          import PackageDescription

          let package = Package(
              name: "DesignSystem",
              platforms: [.iOS(.v14)],
              products: [
                  .library(name: "DesignSystem", targets: ["DesignSystem"])
              ],
              targets: [
                  .binaryTarget(
                      name: "DesignSystem",
                      path: "./DesignSystem.xcframework"
                  )
              ]
          )
          EOF

      # 8️⃣ Commit do Package.swift
      - name: Commit and Push Package.swift
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add SwiftPackage/Package.swift
          git commit -m "Update Package.swift for CI build for version ${{ env.VERSION_NAME }}"
          git push
        continue-on-error: true

      # 9️⃣ Publica o XCFramework como artefato e release no GitHub
      - name: Upload XCFramework as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DesignSystem.xcframework
          path: SwiftPackage/DesignSystem.xcframework

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: SwiftPackage/DesignSystem.xcframework/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
