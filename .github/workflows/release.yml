name: Publish Release

on:
  push:
    branches-ignore:
      - 'main'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Detekt
        run: ./gradlew detekt

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run tests
        run: ./gradlew testDebugUnitTest

  version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      tag: ${{ steps.versioning.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get version from gradle.properties
        id: versioning
        run: |
          VERSION_NAME=$(grep 'VERSION_NAME' gradle.properties | cut -d'=' -f2)
          echo "version=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION_NAME" >> $GITHUB_OUTPUT

  publish-kmp:
    name: Publish KMP Library
    runs-on: ubuntu-latest
    needs: [test, version]
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Publish KMP Library to GitHub Packages
        run: ./gradlew :designsystem:publish -PVERSION_NAME=${{ needs.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-xcframework:
    name: Build XCFramework
    runs-on: macos-latest
    needs: [test, version]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build iOS XCFramework
        run: ./gradlew :designsystem:assembleDesignSystemReleaseXCFramework -PVERSION_NAME=${{ needs.version.outputs.version }}
      - name: Upload XCFramework
        uses: actions/upload-artifact@v4
        with:
          name: DesignSystem.xcframework
          path: designsystem/build/XCFrameworks/release/DesignSystem.xcframework

  release:
    name: Create GitHub Release
    runs-on: macos-latest
    needs: [publish-kmp, build-xcframework, version]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download XCFramework
        uses: actions/download-artifact@v4
        with:
          name: DesignSystem.xcframework
          path: DesignSystem.xcframework
      - name: Package XCFramework
        run: zip -rq DesignSystem.xcframework.zip DesignSystem.xcframework
      - name: Calculate checksum
        id: checksum
        run: echo "CHECKSUM=$(swift package compute-checksum DesignSystem.xcframework.zip)" >> $GITHUB_ENV
      - name: Generate Package.swift
        run: |
          cat <<EOF > Package.swift
          // swift-tools-version:5.9
          import PackageDescription

          let package = Package(
              name: "DesignSystem",
              platforms: [.iOS(.v14)],
              products: [
                  .library(name: "DesignSystem", targets: ["DesignSystem"])
              ],
              targets: [
                  .binaryTarget(
                      name: "DesignSystem",
                      url: "https://github.com/${{ github.repository }}/releases/download/${{ needs.version.outputs.tag }}/DesignSystem.xcframework.zip",
                      checksum: "${{ env.CHECKSUM }}"
                  )
              ]
          )
          EOF
      - name: Create Git Tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ needs.version.outputs.tag }} -m "Release ${{ needs.version.outputs.tag }}"
          git push origin ${{ needs.version.outputs.tag }}
      - name: Create Release and Upload Assets
        run: |
          gh release create ${{ needs.version.outputs.tag }} \
            DesignSystem.xcframework.zip Package.swift \
            --title "Release ${{ needs.version.outputs.tag }}" \
            --notes "Automatic release for version ${{ needs.version.outputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
