name: Publish Release

on:
  push:
    branches:
      - main

# Ensures that only one workflow runs at a time for the main branch.
# Cancels any running workflows for the same branch when a new push occurs.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    name: Publish
    runs-on: macos-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags for version calculation and pushing
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Calculate new version
        id: versioning
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          echo "TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Publish KMP Library to GitHub Packages
        run: ./gradlew :designsystem:publish -PVERSION_NAME=${{ steps.versioning.outputs.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build iOS XCFramework
        run: ./gradlew :designsystem:assembleDesignsystemReleaseXCFramework -PVERSION_NAME=${{ steps.versioning.outputs.TAG }}

      - name: Package XCFramework
        run: |
          cd designsystem/build/XCFrameworks/release
          zip -r ../../../../../DesignSystem.xcframework.zip DesignSystem.xcframework
          cd ../../../../../

      - name: Calculate checksum
        id: checksum
        run: echo "CHECKSUM=$(swift package compute-checksum DesignSystem.xcframework.zip)" >> $GITHUB_ENV

      - name: Create Git Tag and Push
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag ${{ steps.versioning.outputs.TAG }}
          git push origin ${{ steps.versioning.outputs.TAG }}

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.versioning.outputs.TAG }}
          name: Release ${{ steps.versioning.outputs.TAG }}
          body: "Automatic release for version ${{ steps.versioning.outputs.TAG }}"
          files: DesignSystem.xcframework.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Package.swift
        run: |
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/${{ steps.versioning.outputs.TAG }}/DesignSystem.xcframework.zip"
          # Use a different separator for sed to avoid issues with slashes in the URL
          sed -i.bak "s~url: \".*\"~url: \"$RELEASE_URL\"~" Package.swift
          sed -i.bak "s~checksum: \".*\"~checksum: \"${{ env.CHECKSUM }}\"~" Package.swift
          rm Package.swift.bak

      - name: Commit and Push Package.swift
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add Package.swift
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit in Package.swift."
          else
            git commit -m "Update Package.swift for release ${{ steps.versioning.outputs.TAG }} [skip ci]"
            git push origin main
          fi
