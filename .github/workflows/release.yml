name: Publish Release

#on:
#  push:
#    branches:
#      - main

on:
  push:
    branches-ignore:
      - 'main'

jobs:
#  lint:
#    name: Lint
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: gradle
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#      - name: Run Detekt
#        run: ./gradlew detekt
#
#  test:
#    name: Test
#    runs-on: ubuntu-latest
#    needs: lint
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: gradle
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#      - name: Run tests
#        run: ./gradlew testDebugUnitTest

  publish:
    name: Publish
    runs-on: macos-latest
  #  needs: test
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Calculate new version
        id: versioning
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

#      - name: Publish KMP Library to GitHub Packages
#        run: ./gradlew :designsystem:publish -PVERSION_NAME=${{ steps.versioning.outputs.tag }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build iOS XCFramework
        run: ./gradlew :designsystem:assembleDesignsystemReleaseXCFramework -PVERSION_NAME=${{ steps.versioning.outputs.tag }}

      - name: Prepare workspace
        run: |
          echo "📂 Ensuring workspace is writable"
          mkdir -p $GITHUB_WORKSPACE/build
          chmod -R 777 $GITHUB_WORKSPACE/build

      - name: Set up Swift
        run: |
          xcode-select --install || true
          swift --version   

      - name: Validate XCFramework exists
        run: |
          echo "📦 Checking for XCFramework zip..."
          if [ ! -d "designsystem/build/XCFrameworks/release/DesignSystem.xcframework" ]; then
            echo "❌ File not found!"
            ls -R designsystem/build/XCFrameworks || true
            exit 1
          fi

      - name: Package XCFramework
        run: |
          echo "📦 Checking for XCFramework zip..."
          ls -R designsystem/build/XCFrameworks
          cd designsystem/build/XCFrameworks/release
          zip -r ../../../../../DesignSystem.xcframework.zip DesignSystem.xcframework
          cd ../../../../../

      - name: Verify XCFramework zip
        run: |
          echo "📦 Checking for XCFramework zip..."
          ls -lh DesignSystem.xcframework.zip || (echo "❌ File not found!" && exit 1)
      

      - name: Calculate checksum
        id: checksum
        run: echo "CHECKSUM=$(swift package compute-checksum DesignSystem.xcframework.zip)" >> $GITHUB_ENV

      - name: Generate Package.swift
        run: |
          cat <<EOF > Package.swift
          // swift-tools-version:5.9
          import PackageDescription

          let package = Package(
              name: "DesignSystem",
              platforms: [.iOS(.v14)],
              products: [
                  .library(name: "DesignSystem", targets: ["DesignSystem"])
              ],
              targets: [
                  .binaryTarget(
                      name: "DesignSystem",
                      url: "https://github.com/${{ github.repository }}/releases/download/${{ steps.versioning.outputs.tag }}/DesignSystem.xcframework.zip",
                      checksum: "${{ env.CHECKSUM }}"
                  )
              ]
          )
          EOF    

      - name: Create Git Tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.versioning.outputs.tag }} -m "Release ${{ steps.versioning.outputs.tag }}"
          git push origin ${{ steps.versioning.outputs.tag }}

      - name: Create Release and Upload Assets via gh CLI
        run: |
          echo "🚀 Creating release ${{ steps.versioning.outputs.tag }}..."
          gh release create ${{ steps.versioning.outputs.tag }} \
            DesignSystem.xcframework.zip Package.swift \
            --title "Release ${{ steps.versioning.outputs.tag }}" \
            --notes "Automatic release for version ${{ steps.versioning.outputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
